/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ContentService } from "../content.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ContentCreateInput } from "./ContentCreateInput";
import { Content } from "./Content";
import { ContentFindManyArgs } from "./ContentFindManyArgs";
import { ContentWhereUniqueInput } from "./ContentWhereUniqueInput";
import { ContentUpdateInput } from "./ContentUpdateInput";
import { UploadContentInput } from "../UploadContentInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ContentControllerBase {
  constructor(
    protected readonly service: ContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Content })
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createContent(
    @common.Body() data: ContentCreateInput
  ): Promise<Content> {
    return await this.service.createContent({
      data: data,
      select: {
        additionalText: true,
        createdAt: true,
        headline: true,
        id: true,
        image: true,
        owner: true,
        updatedAt: true,
        video: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Content] })
  @ApiNestedQuery(ContentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contents(@common.Req() request: Request): Promise<Content[]> {
    const args = plainToClass(ContentFindManyArgs, request.query);
    return this.service.contents({
      ...args,
      select: {
        additionalText: true,
        createdAt: true,
        headline: true,
        id: true,
        image: true,
        owner: true,
        updatedAt: true,
        video: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Content })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async content(
    @common.Param() params: ContentWhereUniqueInput
  ): Promise<Content | null> {
    const result = await this.service.content({
      where: params,
      select: {
        additionalText: true,
        createdAt: true,
        headline: true,
        id: true,
        image: true,
        owner: true,
        updatedAt: true,
        video: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Content })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateContent(
    @common.Param() params: ContentWhereUniqueInput,
    @common.Body() data: ContentUpdateInput
  ): Promise<Content | null> {
    try {
      return await this.service.updateContent({
        where: params,
        data: data,
        select: {
          additionalText: true,
          createdAt: true,
          headline: true,
          id: true,
          image: true,
          owner: true,
          updatedAt: true,
          video: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Content })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteContent(
    @common.Param() params: ContentWhereUniqueInput
  ): Promise<Content | null> {
    try {
      return await this.service.deleteContent({
        where: params,
        select: {
          additionalText: true,
          createdAt: true,
          headline: true,
          id: true,
          image: true,
          owner: true,
          updatedAt: true,
          video: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/api/generate-landing-page")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateLandingPage(
    @common.Body()
    body: UploadContentInput
  ): Promise<string> {
    return this.service.GenerateLandingPage(body);
  }

  @common.Get("/:id/generate-page")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GeneratePage(
    @common.Body()
    body: UploadContentInput
  ): Promise<string> {
    return this.service.GeneratePage(body);
  }

  @common.Get("/:id/get-user-content")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetUserContent(
    @common.Body()
    body: UploadContentInput
  ): Promise<string> {
    return this.service.GetUserContent(body);
  }

  @common.Get("/:id/retrieve-user-content")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RetrieveUserContent(
    @common.Body()
    body: UploadContentInput
  ): Promise<string> {
    return this.service.RetrieveUserContent(body);
  }

  @common.Get("/:id/upload-content")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadContent(
    @common.Body()
    body: UploadContentInput
  ): Promise<string> {
    return this.service.UploadContent(body);
  }

  @common.Post("/api/upload-user-content")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadUserContent(
    @common.Body()
    body: UploadContentInput
  ): Promise<string> {
    return this.service.UploadUserContent(body);
  }
}
