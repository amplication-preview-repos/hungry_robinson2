/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Content } from "./Content";
import { ContentCountArgs } from "./ContentCountArgs";
import { ContentFindManyArgs } from "./ContentFindManyArgs";
import { ContentFindUniqueArgs } from "./ContentFindUniqueArgs";
import { CreateContentArgs } from "./CreateContentArgs";
import { UpdateContentArgs } from "./UpdateContentArgs";
import { DeleteContentArgs } from "./DeleteContentArgs";
import { GeneratePageInput } from "../GeneratePageInput";
import { UploadContentInput } from "../UploadContentInput";
import { ContentService } from "../content.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Content)
export class ContentResolverBase {
  constructor(
    protected readonly service: ContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "read",
    possession: "any",
  })
  async _contentsMeta(
    @graphql.Args() args: ContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Content])
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "read",
    possession: "any",
  })
  async contents(
    @graphql.Args() args: ContentFindManyArgs
  ): Promise<Content[]> {
    return this.service.contents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Content, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "read",
    possession: "own",
  })
  async content(
    @graphql.Args() args: ContentFindUniqueArgs
  ): Promise<Content | null> {
    const result = await this.service.content(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Content)
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "create",
    possession: "any",
  })
  async createContent(
    @graphql.Args() args: CreateContentArgs
  ): Promise<Content> {
    return await this.service.createContent({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Content)
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "update",
    possession: "any",
  })
  async updateContent(
    @graphql.Args() args: UpdateContentArgs
  ): Promise<Content | null> {
    try {
      return await this.service.updateContent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Content)
  @nestAccessControl.UseRoles({
    resource: "Content",
    action: "delete",
    possession: "any",
  })
  async deleteContent(
    @graphql.Args() args: DeleteContentArgs
  ): Promise<Content | null> {
    try {
      return await this.service.deleteContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async GenerateLandingPage(
    @graphql.Args()
    args: GeneratePageInput
  ): Promise<string> {
    return this.service.GenerateLandingPage(args);
  }

  @graphql.Query(() => String)
  async GeneratePage(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GeneratePage(args);
  }

  @graphql.Query(() => String)
  async GetUserContent(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetUserContent(args);
  }

  @graphql.Query(() => String)
  async RetrieveUserContent(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.RetrieveUserContent(args);
  }

  @graphql.Query(() => String)
  async UploadContent(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadContent(args);
  }

  @graphql.Mutation(() => String)
  async UploadUserContent(
    @graphql.Args()
    args: UploadContentInput
  ): Promise<string> {
    return this.service.UploadUserContent(args);
  }
}
